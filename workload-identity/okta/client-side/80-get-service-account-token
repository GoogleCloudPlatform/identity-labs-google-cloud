#!/usr/bin/env bash
# Copyright 2023 Google LLC
# 
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     https://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

# Generate a service account token and write it to $SA_TOKEN_FILE
#
# Security note:
#
# Environment variables are used in commands here to make it easier to
# understand what is happening.  This, however, is not a security best
# practice because it may be possible to view these variables through
# commands such as "ps." For more  security, use a programming language
# to encode the values and place them in an authorization header.

STS_TOKEN_FILE="/tmp/sts-token.json"
SA_TOKEN_FILE="/tmp/service-account-token.json"

if [ ! -e "$STS_TOKEN_FILE" ]
then
  echo STS token file $STS_TOKEN_FILE does not exist.
  exit 1
fi

if [ -z "$PROJECT_NUMBER" -o -z "$WORKLOAD_POOL" -o -z "$WORKLOAD_PROVIDER" ]
then
  echo One of PROJECT_NUMBER, WORKLOAD_POOL, or WORKLOAD_PROVIDER is undefined.
  echo Please source the environment file.
  exit 2
fi

IAM_CREDENTIALS_ENDPOINT=\
"https://iamcredentials.googleapis.com/v1/projects"\
"/-/serviceAccounts/$SERVICE_ACCOUNT_NAME"\
":generateAccessToken"
SCOPE="https://www.googleapis.com/auth/cloud-platform"
STS_TOKEN=`jq --raw-output .access_token "$STS_TOKEN_FILE"`

echo Generating service account token...

SA_TOKEN=$( \
curl \
--silent \
--request POST \
--data "{\"scope\": \"${SCOPE}\"}" \
--header "Content-Type: text/json; charset=utf-8" \
--header "Authorization: Bearer $STS_TOKEN" \
--url "$IAM_CREDENTIALS_ENDPOINT" \
)

echo Writing $SA_TOKEN_FILE...
echo $SA_TOKEN|jq > $SA_TOKEN_FILE
